<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Xiao&#39;s blog</title>
    <link>https://xiaozhangryy.github.io/post/</link>
    <description>Recent content in Posts on Xiao&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 24 Nov 2020 22:11:18 +0800</lastBuildDate>
    
	<atom:link href="https://xiaozhangryy.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>High dimension | Some notes on proof of high-dimensional consistency</title>
      <link>https://xiaozhangryy.github.io/post/hd_consistency_proof/</link>
      <pubDate>Tue, 24 Nov 2020 22:11:18 +0800</pubDate>
      
      <guid>https://xiaozhangryy.github.io/post/hd_consistency_proof/</guid>
      <description>[@VanderVaart1996]</description>
    </item>
    
    <item>
      <title>Python | Using ctypes to access C code from Python.</title>
      <link>https://xiaozhangryy.github.io/post/python_call_c_ctypes/</link>
      <pubDate>Fri, 10 Apr 2020 15:36:05 +0800</pubDate>
      
      <guid>https://xiaozhangryy.github.io/post/python_call_c_ctypes/</guid>
      <description>This blog introduce how to use ctypes to access C code from Python.
1 C code Here, we use the same C code as my previous blog:
#include &amp;lt;math.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; #define PI 3.1415926535 void mycfunc(double *array_d, int *array_i, double d, int i, char *array_c, double *output) { if (strcmp(array_c, &amp;quot;cos&amp;quot;) == 0) { output[0] = cos(array_d[0] + array_i[0] * PI); output[1] = cos(d + i * PI); } elif (strcmp(array_c, &amp;quot;sin&amp;quot;) == 0) { output[0] = sin(array_d[0] + array_i[0] * PI); output[1] = sin(d + i * PI); } } 2 Compile We can use Python to compile the C file into shared library.</description>
    </item>
    
    <item>
      <title>Python | Make a Python C Extension Module Using Python/C API.</title>
      <link>https://xiaozhangryy.github.io/post/python_call_c/python_call_c/</link>
      <pubDate>Sun, 05 Apr 2020 14:32:05 +0800</pubDate>
      
      <guid>https://xiaozhangryy.github.io/post/python_call_c/python_call_c/</guid>
      <description>This blog introduce how to make a Python C extension module by using Python/C API. The demo package used here can be found on my Github repository.
1 Create package folder Firstly, build the following files and folder：
. ├── README.md ├── setup.py ├── LICENSE.txt └── src ├── cfunction.c ├── cfunction.h └── _cfunction.c The usage of each file is given below。
1.1 README.md This file contains instructions for using this external module.</description>
    </item>
    
    <item>
      <title>Create my blog.</title>
      <link>https://xiaozhangryy.github.io/post/build_blog/build_blog/</link>
      <pubDate>Sun, 29 Mar 2020 17:07:05 +0800</pubDate>
      
      <guid>https://xiaozhangryy.github.io/post/build_blog/build_blog/</guid>
      <description>今天建立了blog，以下是对该过程的一个回顾与总结。
1 Git以及Hugo安装及配置 这一块在网上有很多教程，也没遇到什么难点，在此略过。
2 使用Hugo建立本地Blog 这一块主要参考Oh oh的博客进行建立，具体过程如下：
2.1 创建站点 首先创建站点：
# cd d:blog hogo new site yourblogname # Where &#39;yourblogname&#39; is your blog name. 创建完成后，文件树如下：
├─archetypes ├─content ├─data ├─layouts ├─static ├─themes └─config.toml 2.2 下载一个主题 在Hugo主题商店挑选一款自己喜欢的主题直接clone下来就行。
cd themes git clone https://github.com/ertuil/erblog.git themes文件夹用处存放各式主题，可以多下载几个尝试一下不同风格。
2.3 配置config.toml 这里我参考了两份官方文档，分别关于Configure与Taxonomies。 我的配置文件如下：
baseURL = &amp;quot;https://tesla-xiao.github.io/&amp;quot; # It seems ok without it. title = &amp;quot;Tesla&#39;s blog&amp;quot; theme = &amp;quot;erblog&amp;quot; paginate = 8 languageCode = &amp;quot;zh-CN&amp;quot; DefaultContentLanguage = &amp;quot;en&amp;quot; enableInlineShortcodes = true footnoteReturnLinkContents = &amp;quot;^&amp;quot; [params] author = &amp;quot;Tesla&amp;quot; bio = &amp;quot;&amp;quot;&amp;quot; &amp;lt;p&amp;gt; Xiao Zhang is a Ph.</description>
    </item>
    
  </channel>
</rss>